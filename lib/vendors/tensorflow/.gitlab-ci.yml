stages:
  - pre-check
  - build
  - sync
  - deploy

# Avoid running duplicate pipeline
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

variables:
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  SYNC_BRANCH_NAME: "ci/sync_gh_tflite-micro"
  SYNC_COMMIT_MSG: "tflite-micro-sync: Update esp-tflite-micro (synced from github)"
  REPO_URL: "https://${PUSH_TO_GITLAB_TOKEN_NAME}:${PUSH_TO_GITLAB_TOKEN}@gitlab.espressif.cn:6688/app-frameworks/tflite-micro-esp-examples.git"

pre-commit-mr:
  stage: pre-check
  image: "$CI_DOCKER_REGISTRY/pre-commit-codecheck:1"
  before_script:
    - echo "Skip common before script"
  script:
    - git diff-tree --no-commit-id --name-only -r $CI_COMMIT_SHA | xargs pre-commit run --files
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  tags: [build, internet]

include:
  - project: espressif/shared-ci-dangerjs
    ref: master
    file: danger.yaml
run-danger-mr-linter:
  before_script:
    - echo "Skip common before script"
  stage: pre-check
  tags: [build, internet]

before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY_TMP > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

.test_build: &test_build
    # Build examples
    - for TARGET in $EXAMPLE_TARGETS; do
    - ./scripts/build_examples.sh $TARGET
    - done

.build_template:
  stage: build
  image: espressif/idf:latest
  tags:
    - build
  variables:
    PEDANTIC_FLAGS: "-Werror -Wno-error=cpp -Werror=unused-variable -Werror=unused-but-set-variable -Werror=unused-function"
    EXTRA_CFLAGS: "${PEDANTIC_FLAGS}"
    EXTRA_CXXFLAGS: "${PEDANTIC_FLAGS}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - when: always
  script:
    - cd ${CI_PROJECT_DIR}
    # build examples
    - *test_build
    - cd ${CI_PROJECT_DIR}

build_idf_v5.1:
  extends: .build_template
  image: espressif/idf:release-v5.1
  variables:
    EXAMPLE_TARGETS: esp32 esp32s2 esp32s3 esp32c3 esp32c2

build_idf_v5.0:
  extends: .build_template
  image: espressif/idf:release-v5.0
  variables:
    EXAMPLE_TARGETS: esp32 esp32s3 esp32c3 esp32c2

build_idf_v4.4:
  extends: .build_template
  image: espressif/idf:release-v4.4
  variables:
    EXAMPLE_TARGETS: esp32 esp32s3 esp32c3

build_idf_v4.3:
  extends: .build_template
  image: espressif/idf:release-v4.3
  variables:
    EXAMPLE_TARGETS: esp32

build_idf_v4.2:
  extends: .build_template
  image: espressif/idf:release-v4.2
  variables:
    EXAMPLE_TARGETS: esp32

.push_to_gitlab: &push_to_gitlab
    # Push updated repo (synced from github) to gitlab
    - git config --global user.email "vikram.dattu@espressif.com"
    - git config --global user.name "Gitlab-Scheduled-GH-Sync-Job"
    - git remote set-url origin ${REPO_URL}
    # check - remote branch should not exist (i.e. the open MR (if any) should be merged and branch should have been deleted)
    - git ls-remote --exit-code --heads ${REPO_URL} ${SYNC_BRANCH_NAME} && echo "ERROR - ${SYNC_BRANCH_NAME} branch already exists. Is there any open MR ?" && exit 1
    - git branch ${SYNC_BRANCH_NAME} 2>&1 || echo "Branch exists" && git branch -D ${SYNC_BRANCH_NAME} 2>&1 || echo "Branch deleted" && git branch ${SYNC_BRANCH_NAME} 2>&1 && echo "Branch created"
    - git checkout ${SYNC_BRANCH_NAME}
    - git add .
    - git commit -m "${SYNC_COMMIT_MSG}"
    - git push --set-upstream origin ${SYNC_BRANCH_NAME}
    - git status
    - git log -2
    # The variable ${SYNC_BRANCH_NAME} is not getting set here (currently), so branch name is directly added for `source_branch` key
    - curl --request POST --url "https://gitlab.espressif.cn:6688/api/v4/projects/2457/merge_requests" --header
      "PRIVATE-TOKEN:${PUSH_TO_GITLAB_TOKEN}" --header "content-type:application/json" --data '{"title":"Sync esp-tflite-micro from github - '${CI_PIPELINE_ID}'", "source_branch":"ci/sync_gh_tflite-micro", "target_branch":"master" }'
    - git checkout -

sync_from_github:on-schedule:
  stage: sync
  image: espressif/idf:release-v5.0
  tags:
    - sync
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "master"'
  script:
    # sync tflite-lib from github
    - cd ${CI_PROJECT_DIR}
    - echo "====================== Sync esp-tflite-micro from Github and push to Gitlab ======================"
    - python3 -m pip install -r scripts/gh_sync_req.txt
    - ./scripts/sync_from_tflite_micro.sh
    # push to gitlab
    - *push_to_gitlab
    - echo "====================== Done ======================"

push_to_github:
  stage: deploy
  image: espressif/idf:release-v5.0
  tags:
    - deploy
  when: manual
  only:
    - master
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GH_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote remove github &>/dev/null || true
    - git remote add github git@github.com:espressif/esp-tflite-micro.git
    - git push github "${CI_COMMIT_SHA}:refs/heads/${CI_COMMIT_REF_NAME}"
